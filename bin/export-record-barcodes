#!/usr/bin/env python3
import os
import json
import logging
from csv import DictWriter
from sys import stdout, stderr
from concurrent.futures import as_completed, ThreadPoolExecutor
from id3c.cli import redcap
from os import environ
from typing import Optional, Dict
from urllib.parse import urlencode, urljoin


LOG_LEVEL = os.environ.get("LOG_LEVEL", "debug").upper()

logging.basicConfig(
    level = logging.ERROR,
    format = "[%(asctime)s] %(levelname)-8s %(message)s",
    datefmt = "%Y-%m-%d %H:%M:%S%z",
    stream = stderr)

logging.captureWarnings(True)

log = logging.getLogger(__name__)
log.setLevel(LOG_LEVEL)


REDCAP_API_URL = "https://redcap.iths.org/api/"

BARCODE_FIELDS = [
    "pre_scan_barcode",
    "utm_tube_barcode",
    "utm_tube_barcode_2",
    "reenter_barcode",
    "return_utm_barcode",
    "collect_barcode_kiosk",
    "barcode_swabsend",
    *[f'barcode_{i}' for i in range(1,35)],
    *[f'barcode_optional_{i}' for i in range(1,5)],
    "core_collection_barcode",
    "return_collection_barcode",
    *[f'welcome_barcode_{i}' for i in range(1,3)],
    *[f'serial_barcode_{i}' for i in range(1,5)],
    *[f'return_serial_barcode_{i}' for i in range(1,5)],
    "outgoing_barcode",
    "core_activation_barcode",
    "collection_barcode",
]

REDCAP_FIELDS = [
    "record_id",
    "redcap_event_name",
    "back_end_scan_date",  # used for record disambiguation
    "redcap_repeat_instance",
    "post_collection_data_entry_qc_complete",  # used to see if we can deep link to the PCDEQC form
    *BARCODE_FIELDS,
]

OUTPUT_FIELDS = [
    "project_id",
    "project_lang",
    "project_purview",
    "record_id",
    "event_name",
    "repeat_instance",
    "record_url",
    "record_link",
    "back_end_scan_date",
    *BARCODE_FIELDS,
]


class Project(redcap.Project):

    def __init__(self,
        project_id: int,
        lang: str,
        purview: Optional[str] = '',
        event_id_map: Optional[Dict[str, int]] = {},
        fetch_page_size: Optional[int] = None) -> None:
        """
        Creates a Project object given the REDCap project PID *project_id*,
        an ISO language code *lang*, a study *purview*, and a REDCap project
        *event_id_map* that contains a map of a project's unique event name
        to the associated `event_id` in REDCap.
        """
        super().__init__(REDCAP_API_URL, project_id)
        self.lang = lang
        self.purview = purview
        self.event_id_map = event_id_map
        self.fetch_page_size = fetch_page_size


def main():
    # Unfortunately, the REDCap API does not expose the event_id attribute which
    # is required to generate deep links into a specific "page" in a REDCap
    # project. The event_id changes per project event, so hard code the
    # relationship between unique event name and event_id for each REDCap
    # project.
    #
    # With the addition of all of these event maps, it'd be even nicer to
    # extract out this data into a separate NDJSON/YAML file.
    projects = [
        # SCAN (public health action)
        Project(20759, "en", "ph", {
            'priority_arm_1': 732107,
            'symptomatic_arm_2': 732126,
            'asymptomatic_arm_3': 732127,
        }),
        Project(21520, "es", "ph", {
            'priority_arm_1': 735113,
            'symptomatic_arm_2': 735114,
            'asymptomatic_arm_3': 735115,
        }),
        Project(21521, "zh-Hant", "ph", {
            'priority_arm_1': 735116,
            'symptomatic_arm_2': 735117,
            'asymptomatic_arm_3': 735118,
        }),

        # SCAN (research study)
        Project(22467, "tl", "irb", {
            'priority_arm_1': 737713,
            'symptomatic_arm_2': 737714,
            'asymptomatic_arm_3': 737715,
            'group_enroll_arm_4': 737755,
        }),
        Project(22468, "ti", "irb", {
            'priority_arm_1': 737716,
            'symptomatic_arm_2': 737717,
            'asymptomatic_arm_3': 737718,
            'group_enroll_arm_4': 737756,
        }),
        Project(22470, "am", "irb", {
            'priority_arm_1': 737722,
            'symptomatic_arm_2': 737723,
            'asymptomatic_arm_3': 737724,
            'group_enroll_arm_4': 737758,
        }),
        Project(22471, "so", "irb", {
            'priority_arm_1': 737725,
            'symptomatic_arm_2': 737726,
            'asymptomatic_arm_3': 737727,
            'group_enroll_arm_4': 737759,
        }),
        Project(22461, "en", "irb", {
            'priority_arm_1': 737705,
            'symptomatic_arm_2': 737706,
            'asymptomatic_arm_3': 737707,
            'group_enroll_arm_4': 737754
        }),
        Project(22472, "ru", "irb", {
            'priority_arm_1': 737728,
            'symptomatic_arm_2': 737729,
            'asymptomatic_arm_3': 737730,
            'group_enroll_arm_4': 737760,
        }),
        Project(22473, "zh-Hans", "irb", {
            'priority_arm_1': 737731,
            'symptomatic_arm_2': 737732,
            'asymptomatic_arm_3': 737733,
            'group_enroll_arm_4': 737761,
        }),
        Project(22474, "zh-Hant", "irb", {
            'priority_arm_1': 737734,
            'symptomatic_arm_2': 737735,
            'asymptomatic_arm_3': 737736,
            'group_enroll_arm_4': 737762,
        }),
        Project(22475, "es", "irb", {
            'priority_arm_1': 737737,
            'symptomatic_arm_2': 737738,
            'asymptomatic_arm_3': 737739,
            'group_enroll_arm_4': 737763,
        }),
        Project(22476, "ko", "irb", {
            'priority_arm_1': 737740,
            'symptomatic_arm_2': 737741,
            'asymptomatic_arm_3': 737742,
            'group_enroll_arm_4': 737764,
        }),
        Project(22477, "vi", "irb", {
            'priority_arm_1': 737743,
            'symptomatic_arm_2': 737744,
            'asymptomatic_arm_3': 737745,
            'group_enroll_arm_4': 737765,
        }),
        Project(23089, "en", "irb-kiosk", {
            'priority_arm_1': 739632,
            'symptomatic_arm_2': 739633,
            'asymptomatic_arm_3': 739634,
            'group_enroll_arm_4': 739635,
        }),

        # We're skipping REDCap PID 23959 (SCAN: Husky Test), because this
        # was a one-off project that only had enrollments for a couple of weeks
        # before the UW Reopening study launched.

        # UW Reopening Testing (HCT)
        # There are currently two events for this project: Enrollment and
        # Encounter events, both part of arm 1. None of the Enrollment event
        # instruments has any barcode fields, so include only the Encounter
        # event_id.
        Project(23854, "en", "irb", {
            'encounter_arm_1': 742155,
        }, 5000),

        # Childcare Study
        Project(23740, "en", "irb", {
            'enrollment_arm_1': 742420,
            'week1_mon_test_arm_1': 742421,
            'week1_thur_test_arm_1': 742422,
            'week2_mon_test_arm_1': 742423,
            'week2_thur_test_arm_1': 742424,
            'week3_mon_test_arm_1': 742425,
            'week3_thur_test_arm_1': 742426,
            'week4_mon_test_arm_1': 742427,
            'week4_thur_test_arm_1': 742428,
            'week5_mon_test_arm_1': 742429,
            'week5_thur_test_arm_1': 742430,
            'week6_mon_test_arm_1': 742431,
            'week6_thur_test_arm_1': 742432,
            'week7_mon_test_arm_1': 742433,
            'week7_thur_test_arm_1': 742434,
            'week8_mon_test_arm_1': 742435,
            'week8_thur_test_arm_1': 742436,
            'unscheduled_arm_1': 747706,
            'enrollment_arm_2': 742438,
            'week_2_arm_2': 742439,
        }),

        # Adult Family Home and Workplace Outbreaks Study
        Project(27619, "en", "clinical", None),

        # Snohomish School District Testing
        Project(27574, "en", "irb", {
            'enrollment_arm_1': 751314,
            'week_1_arm_1': 757069,
            'week_2_arm_1': 757072,
            'week_3_arm_1': 757737,
            'week_4_arm_1': 757739,
            'week_5_arm_1': 757742,
            'week_6_arm_1': 757745,
            'week_7_arm_1': 757750,
            'week_8_arm_1': 757752,
            'week_9_arm_1': 757757,
            'week_10_arm_1': 757762,
            'week_11_arm_1': 757764,
            'week_12_arm_1': 757765,
            'week_13_arm_1': 757770,
            'week_14_arm_1': 757772,
            'week_15_arm_1': 757777,
            'enrollment_arm_2': 751929,
            'week_2_arm_2': 757064,
        }),

        # 2021 Childcare Study
        Project(29351, "en", "irb", {
            'enrollment_arm_1': 756831,
            'week1_test_1_arm_1': 759847,
            'week1_test_2_arm_1': 759852,
            'week2_test_1_arm_1': 759857,
            'week2_test_2_arm_1': 759862,
            'week3_test_1_arm_1': 759867,
            'week3_test_2_arm_1': 759872,
            'week4_test_1_arm_1': 759877,
            'week4_test_2_arm_1': 759882,
            'week5_test_1_arm_1': 759887,
            'week5_test_2_arm_1': 759892,
            'week6_test_1_arm_1': 759897,
            'week6_test_2_arm_1': 759902,
            'week7_test_1_arm_1': 759907,
            'week7_test_2_arm_1': 759912,
            'week8_test_1_arm_1': 759917,
            'week8_test_2_arm_1': 759922,
            'week9_test_1_arm_1': 759927,
            'week9_test_2_arm_1': 759932,
            'week10_test_1_arm_1': 759937,
            'week10_test_2_arm_1': 759942,
            'week11_test_1_arm_1': 759947,
            'week11_test_2_arm_1': 759952,
            'week12_test_1_arm_1': 759957,
            'week12_test_2_arm_1': 759962,
            'week13_test_1_arm_1': 759967,
            'week13_test_2_arm_1': 759972,
            'week14_test_1_arm_1': 759977,
            'week14_test_2_arm_1': 759982,
            'week15_test_1_arm_1': 759987,
            'week15_test_2_arm_1': 759992,
            'week16_test_1_arm_1': 759997,
            'week16_test_2_arm_1': 760002,
            'week17_test_1_arm_1': 760007,
            'week17_test_2_arm_1': 760012,
            'unscheduled_arm_1': 756916,
            'enrollment_arm_2': 756921,
            'week_2_arm_2': 756926,
        }),

        # Apple Respiratory Study
        Project(24499, "en", "irb", {
            'enrollment_arm_1': 743460,
            'baseline_test_arm_1': 769723,
            'illness_episode_arm_1': 769724,
            'illness_kit_replac_arm_1': 769728,
            'serial_kit_fulfill_arm_1': 769733,
            'serial_event_1_arm_1': 769737,
            'serial_event_2_arm_1': 769742,
            'serial_event_3_arm_1': 769743,
            'serial_event_4_arm_1': 769744,
        }),
    ]

    csv = DictWriter(stdout, fieldnames = OUTPUT_FIELDS, dialect = "unix")
    csv.writeheader()
    stdout.flush()

    with ThreadPoolExecutor(5) as pool:
        futures = [
            pool.submit(fetch_records, p)
                for p in projects ]

        results = (f.result() for f in as_completed(futures))

        for project_records in results:
            for record in project_records:
                csv.writerow(record)


def fetch_records(project):
    return list(_fetch_records(project))


def _fetch_records(project):
    log.debug(f'Parsing project {project.id}')

    if project._details["is_longitudinal"]:
        event_arm = {
            event["unique_event_name"]: event["arm_num"]
                for event in project._fetch("event") }

    for record in project.records(fields=REDCAP_FIELDS, filter=has_any_barcode(project), raw=True, page_size=project.fetch_page_size):
        query_params = {
            "pid": project.id,
            "id": record.id,
        }

        if project._details["is_longitudinal"]:
            event_name = record["redcap_event_name"]
            arm = event_arm[event_name]
            query_params['arm'] = arm

        # Only deep link to the PCDEQC form if it exists
        # ([post_collection_data_entry_qc_complete] != ""). Otherwise, link to
        # the record home page.
        if record['post_collection_data_entry_qc_complete'] == "":
            redcap_endpoint = 'record_home'
        else:
            query_params['page'] = 'post_collection_data_entry_qc'
            if project._details["is_longitudinal"]:
                query_params['event_id'] = project.event_id_map[event_name]
            redcap_endpoint = 'index'
            # Instance is only needed for deep linking to a specific form, so
            # don't bother including it in the query if we're directing users
            # to the record home page.
            instance = record.get('redcap_repeat_instance')
            if instance:
                query_params['instance'] = instance

        query = urlencode(query_params)

        record_url = urljoin(project.base_url,
            f"redcap_v{project.redcap_version}/DataEntry/{redcap_endpoint}.php?{query}")

        data = {
            "project_id": project.id,
            "project_lang": project.lang,
            "project_purview": project.purview,
            "record_id": record.id,
            "repeat_instance": record.get("redcap_repeat_instance"),  # Used in duplicate disambiguation
            "record_url": record_url,
            "record_link": {
                "href": record_url,
                "label": f"{record.id} ({project.lang})",
            },
            "back_end_scan_date": record.get("back_end_scan_date"),

            # The barcode fields were made optional for the SCAN IRB Kiosk project
            # which is not a clone of the SCAN IRB project. We should re-examine this
            # if it changes the philosophy that was inteded for these fields.
            # jccraft 07/17/2020
            **{ field: normalize_barcode(record.get(field)) for field in BARCODE_FIELDS }
        }

        if project._details["is_longitudinal"]:
            data['event_name'] = event_name

        yield data


def has_any_barcode(project):
    fields = set(BARCODE_FIELDS) & set(f["field_name"] for f in project.fields)
    return " or ".join(f"[{field}] <> ''" for field in fields)


def normalize_barcode(barcode):
    if not barcode:
        return None

    return barcode.lower().strip() or None


if __name__ == "__main__":
    main()
